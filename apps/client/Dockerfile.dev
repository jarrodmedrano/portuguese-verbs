FROM node:18-slim AS builder
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN apt-get autoclean
RUN apt-get clean
RUN apt-get update

# Set working directory
WORKDIR /app
COPY . .
# Only Take packages that are needed to compile this app
RUN npx turbo prune --scope=client --docker

# Add lockfile and package.json's of isolated subworkspace
FROM --platform=linux/amd64 node:18-slim AS installer
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
WORKDIR /app
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=builder /app/turbo.json ./turbo.json
RUN corepack enable && corepack prepare pnpm@7.4.1 --activate 
RUN pnpm install --no-frozen-lockfile

FROM --platform=linux/amd64 node:18-slim AS sourcer
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN apt-get autoclean
RUN apt-get clean
WORKDIR /app
COPY --from=installer /app/ .
COPY --from=builder /app/out/full/ .
# RUN apt-get install -y openssl
# RUN npx prisma db pull && prisma generate
# RUN apt-get update -y && apt-get install -y openssl
RUN corepack enable && corepack prepare pnpm@7.4.1 --activate
# RUN cd apps/api && pnpm run prebuild
# RUN npx prisma
COPY .gitignore .gitignore
RUN npx turbo run build  --filter=client...

FROM --platform=linux/amd64 node:18-slim as runner
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
WORKDIR /app
RUN corepack enable && corepack prepare pnpm@7.4.1 --activate
COPY --from=sourcer /app/ .
WORKDIR /app/apps/client/
CMD [ "pnpm", "dev" ]