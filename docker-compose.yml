volumes:
  database:
    driver: local
services:
  verbecc:
    container_name: verbecc
    image: bretttolbert/verbecc-svc:latest
    restart: always
    ports:
      - 8000:8000
    networks:
      - app_network
    expose:
      - '8000'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
  api:
    container_name: api
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    restart: always
    ports:
      - 8080:8080
    networks:
      - app_network
    expose:
      - '8080'
    environment:
      - VERBECC_API=http://verbecc:8000
      - TRPC_PORT=8080
    volumes:
      - ./apps/api:/app/apps/api
    image: ${IMAGE_URI:-api}:${IMAGE_TAG:-latest}
  client:
    container_name: client
    build:
      context: .
      dockerfile: ./apps/client/Dockerfile
    restart: always
    ports:
      - 3000:3000
    networks:
      - app_network
    environment:
      - VERBECC_API=http://verbecc:8000
      - NODE_ENV=production
      - NEXT_PUBLIC_TRPC_API=http://api:8080
    image: ${IMAGE_URI:-client}:${IMAGE_TAG:-latest}
  # reverse-proxy:
  #   image: nginx:stable
  #   container_name: nginx_container
  #   ports:
  #     - 3050:80
  #   volumes:
  #     - ./packages/config/nginx.conf:/etc/nginx/nginx.conf
  #   extra_hosts:
  #     - 'host.docker.internal:host-gateway'
# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  app_network:
    external: true
